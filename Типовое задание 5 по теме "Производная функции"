static string koef(int k, string temp, bool f){
            string mono="";
            if (f == false)
            {
                if (temp != "")
                {
                    if (k > 0)
                    {
                        if (k == 1)
                        {
                            mono = "+" + temp;
                        }
                        else
                        {
                            mono = "+" + k + "*" + temp;
                        }
                    }

                    if (k < 0)
                    {
                        if (k == -1)
                        {
                            mono = "-" + temp;
                        }
                        else
                        {
                            mono = k + "*" + temp;
                        }
                    }
                }
                else
                {
                    if (k > 0)
                    {
                        mono = "+" + k;
                    }
                    if (k < 0)
                    {
                        mono = "" + k;
                    }
                }
            }

            if (f == true)
            {
                if (temp != "")
                {
                    if (k > 0)
                    {
                        if (k == 1)
                        {
                            mono = temp;
                        }
                        else
                        {
                            mono = k + "*" + temp;
                        }
                    }

                    if (k < 0)
                    {
                        if (k == -1)
                        {
                            mono = "-" + temp;
                        }
                        else
                        {
                            mono = k + "*" + temp;
                        }
                    }
                }
                else
                {
                    if (k > 0)
                    {
                        mono = "" + k;
                    }
                    else
                    {
                        mono = "" + k;
                    }
                }
            }
            

            return mono;
    }


int k;
string question,correct_answer,func,lim;
Random rnd = new Random();

k = rnd.Next(1,29);

switch (k)
      {
          case 1:
              func="(tan(x)-x)/(x-sin(x))";
              lim="0";
              break;
          case 2:
              func="(3*tan(4*x)-12*tan(x))/(3*sin(4*x)-12*sin(x))";
              lim="0";
              break;
          case 3:
              func="(tan(3*x))/(tan(x))";
              lim="pi/2";
              break;
          case 4:
              func="(x*cot(x)-1)/(x**2)";
              lim="0";
              break;
          case 5:
              func="(tan(x)**(1/3)-1)/(2*sin(x)**2-1)";
              lim="pi/4";
              break;
          case 6:
              func="(x*(exp(x)+1)-2*(exp(x)-1))/x**3";
              lim="0";
              break;
          case 7:
              func="(1-cos(x**2))/(x**2*sin(x**2))";
              lim="0";
              break;
          case 8:
              func="(asin(2*x)-2*asin(x))/x**3";
              lim="0";
              break;
          case 9:
              int a=rnd.Next(2,8),b=rnd.Next(1,6);
              b +=a;
              func=string.Format("(log(sin({0}*x)))/(log(sin({1}*x)))",a,b);
              lim="0";
              break;
          case 10:
              a=rnd.Next(2,8);
              b=rnd.Next(1,6);
              b +=a;
              func=string.Format("(log(cos({0}*x)))/(log(cos({1}*x)))",a,b);
              lim="0";
              break;
          case 11:
              func="(cos(sin(x))-cos(x))/x**4";
              lim="0";
              break;
          case 12:
              func="x**(1/(1-x))";
              lim="1";
              break;
          case 13:
              func="x**(1/(1-x))";
              lim="1";
              break;
          case 14:
              func="(tan(x))**(tan(2*x))";
              lim="pi/4";
              break;
          case 15:
              func="(cot(x))**(sin(x))";
              lim="0";
              break;
          case 16:
              func="(tan(pi*x/(2*x+1)))**(1/x)";
              lim="oo";
              break;
          case 17:
              func="(tan(x))**(cot(x-pi/4))";
              lim="pi/4";
              break;
          case 18:
              a=rnd.Next(2,8);
              b=rnd.Next(1,6);
              b +=a;
              func=string.Format("(({0}**x-x*log({1}))/({2}**x-x*log({3})))**(1/x**2)",a,a,b,b);
              lim="0";
              break;
          case 19:
              func="(1/x-1/(exp(x)-1))";
              lim="0";
              break;
          case 20:
              func="(1/log(x)-1/(x-1))";
              lim="1";
              break;
          case 21:
              func="(cot(x)-1/x)";
              lim="0";
              break;
          case 22:
              a=rnd.Next(2,8);
              func=string.Format("({0}**x-x**{1})/(x-{2})",a,a,a);
              lim=""+a;
              break;
          case 23:
              a=rnd.Next(2,8);
              func=string.Format("(({0}+x)**x-{1}**x)/x**2",a,a);
              lim="0";
              break;
          case 24:
              func="(2/pi*atan(x))**x";
              lim="oo";
              break;
          case 25:
              func="(asin(x)/x)**(1/x**2)";
              lim="0";
              break;
          case 26:
              a=rnd.Next(1,4);
              if (a == 1){
                func="(sin(x)/x)**(1/x)";  
              }
              else{
                func=string.Format("(sin(x)/x)**(1/x**{0})",a);
              }
              lim="0";
              break;
          case 27:
              a=rnd.Next(1,4);
              if (a == 1){
                func="(tan(x)/x)**(1/x)";  
              }
              else{
                func=string.Format("(tan(x)/x)**(1/x**{0})",a);
              }
              lim="0";
              break;
          case 28:
              a=rnd.Next(1,4);
              if (a == 1){
                func="(atan(x)/x)**(1/x)";  
              }
              else{
                func=string.Format("(atan(x)/x)**(1/x**{0})",a);
              }
              lim="0";
              break;
      }
      
question = Helper.Latex(string.Format("limit({0}, x, {1})",func,lim),false);
correct_answer = Helper.Eval(string.Format("limit({0}, x, {1})",func,lim));
