static string koef(int k, string temp, bool f){
            string mono="";
            if (f == false)
            {
                if (temp != "")
                {
                    if (k > 0)
                    {
                        if (k == 1)
                        {
                            mono = "+" + temp;
                        }
                        else
                        {
                            mono = "+" + k + "*" + temp;
                        }
                    }

                    if (k < 0)
                    {
                        if (k == -1)
                        {
                            mono = "-" + temp;
                        }
                        else
                        {
                            mono = k + "*" + temp;
                        }
                    }
                }
                else
                {
                    if (k > 0)
                    {
                        mono = "+" + k;
                    }
                    if (k < 0)
                    {
                        mono = "" + k;
                    }
                }
            }

            if (f == true)
            {
                if (temp != "")
                {
                    if (k > 0)
                    {
                        if (k == 1)
                        {
                            mono = temp;
                        }
                        else
                        {
                            mono = k + "*" + temp;
                        }
                    }

                    if (k < 0)
                    {
                        if (k == -1)
                        {
                            mono = "-" + temp;
                        }
                        else
                        {
                            mono = k + "*" + temp;
                        }
                    }
                }
                else
                {
                    if (k > 0)
                    {
                        mono = "" + k;
                    }
                    else
                    {
                        mono = "" + k;
                    }
                }
            }
            

            return mono;
    }


int k,a,b,c;
string question,correct_answer;

Random rnd = new Random();
a = rnd.Next(2,5);
b = rnd.Next(1,4);
c = rnd.Next(1,3);

k = rnd.Next(0,10);


if (k > 1){
    //int m = rnd.Next(0,8);
    int m=7;
    
    switch (m){
        case 0:
        question = Helper.Eval(koef(rnd.Next(1,8),"x**"+a,true)+"*sin("+koef(b,"x**"+c,false)+")");
        break;
        case 1:
        question = Helper.Eval(koef(rnd.Next(1,8),"x**"+a,true)+"*cos("+koef(b,"x**"+c,false)+")");
        break;
        case 2:
        question = Helper.Eval(koef(rnd.Next(1,8),"x**"+a,true)+"*exp("+koef(b,"x**"+c,false)+")");
        break;
        case 3:
        question = Helper.Eval(koef(rnd.Next(1,8),"x**"+a,true)+"*log(exp(x)-x)");
        break;
        case 4:
        question = Helper.Eval(koef(rnd.Next(1,8),"x**"+a,true)+"*log("+koef(1,"cos(x)**"+c,true)+")");
        break;
        case 5:
        question = Helper.Eval(koef(rnd.Next(1,8),"x**"+a,true)+"*log(1+"+koef(1,"sin(x)**"+c,true)+")");
        break;
        case 6:
        question = Helper.Eval(koef(rnd.Next(1,8),"x**"+a,true)+"*log(1+"+koef(1,"atan(x)**"+c,true)+")");
        break;
        case 7:
        question = Helper.Eval(koef(rnd.Next(1,8),"x**"+a,true)+"*log(1+"+koef(b,"x**"+c,true)+")");
        break;
    }
    int num = 0, i = 1;
    
    while (num != 3){
    correct_answer = Helper.Eval(string.Format("({0}).series(x,0,{1})",question, i));
    num = correct_answer.Length - correct_answer.Replace("x","").Length;
    i++;
}
    
}

if (k == 0){
    int m = rnd.Next(0,6);
    
    switch (m){
        case 0:
        question = "exp(x)*cos(x)-1";
        break;
        case 1:
        question = "(exp(x)-1)*sin(x)-x**2";
        break;
        case 2:
        question = "sin(x)*atan(x)-x**2";
        break;
        case 3:
        question = "exp(x)*sin(x)-x";
        break;
        case 4:
        question = "exp(x)*log(1+x)-x";
        break;
        case 5:
        question = "sin(x)*log(1+x)-x**2";
        break;
    }
    
    int num = 0, i = 1;
    while (num != 3){
    correct_answer = Helper.Eval(string.Format("({0}).series(x,0,{1})",question, i));
    num = correct_answer.Length - correct_answer.Replace("x","").Length;
    i++;
}
    
}

if (k == 1){
    int m = rnd.Next(6,12);
    switch (m){
        case 6:
        question = "(cos(x))/(2-x**2)";
        break;
        case 7:
        question = "(sin(x))/(6*x-x**3)";
        break;
        case 8:
        question = "(log(1+x))/(2*x-x**2)";
        break;
        case 9:
        question = "(atan(x))/(3*x-x**3)";
        break;
        case 10:
        question = "(sqrt(1+x))/(2+x)";
        break;
        case 11:
        question = "((1+x)**(1/3))/(3-x)";
        break;
    }
    
    int num = 0, i = 1;
while (num != 2){
    correct_answer = Helper.Eval(string.Format("({0}).series(x,0,{1})",question, i));
    num = correct_answer.Length - correct_answer.Replace("x","").Length;
    i++;
}
    
}



correct_answer = correct_answer.Substring(0, correct_answer.IndexOf("O") - 3);
question = Helper.Latex(question,false);





